paas: #Dedicated to compiler
  version: v1.1
  quotas:
    - category: compute
      type: cpu
      capacity: '250m'
    - category: memory
      type: memory
      capacity: '256Mi'

#Config
maps:
  map1:
    key1: value3
    key2: ${FOO}
  map2:
    foo: bar
    bar: foo

#Secrets provider
secrets:
  map-vault:
    provider: map #Internal secrets, must be passed in this file
    options:
      key1: value2
      key2: ${FOO}
  map-vault2:
    provider: map #Internal secrets, must be passed in this file
    options:
      hello: world
  volume-vault:
    provider: map
    options:
      foo: bar
      bar: foo
#  tls-vault:
#    provider: map
#    type: tls
#    options:
#      tls.crt: "${TLS_CERT}"
#      tls.key: "${TLS_KEY}"
#      ca.crt: "${TLS_CA}"

#Custom image, not available in the library
images:
  foo:
    build-name: foo
    tag: latest
    path: '/images/${FOO}'

#Hook to build the project before container, Called in this order
builds:
  composer-build: #Name of the step
    composer-${PHP_VERSION}:
      action:  ${COMPOSER} #Hook to call
      path: php-app
      arguments:
        - 'prefer-dist'
        - 'no-interaction'
        - 'no-dev'
        - 'optimize-autoloader'
        - 'classmap-authoritative'
  npm-build:
    npm:
      action:  'install'
      path: nodejs-app
  pip-build:
    pip:
      action:  'install'
      path: python-app
      arguments:
        - 'r'
        - 'requirements.txt'

#Volume to build to use with container
volumes:
  other-name: #Name of the volume
    add: #folder or file, from .paas.yaml where is located to add to the volume
      - 'php-app/vendor'
  if{STAGE=demo}:
    extra: #Name key1of the volume
      local-path: "/foo/bar" #optional local path where store data in the volume
      add: #folder or file, from .paas.yaml where is located to add to the volume
        - 'extra'
        - 
  jobs:
    init-php:
      planning: during-deployment
      pods:
        init-php:
          containers:
            php-run: #Container name
              image: ${PHP_IMAGE} #Container image to use
              version: '${PHP_VERSION}-cli'
              volumes: #Volumes to link
                app:
                  mount-path: '/opt/app' #Path where data will be stored
                  add: #folder or file, from .paas.yaml where is located to add to the volume
                    - 'php-job/'
                cron: #Persistent volume, can not be pre-populated
                  name: 'job-volume'
                  mount-path: '/mnt/job'
                  persistent: true
                  write-many: true
              variables: #To define some environment variables
                SERVER_DIRECTORY: '/opt/app/'
                SERVER_SCRIPT: 'src/init.php'
              resources:
                - type: cpu
                  require: 10%
                - type: memory
                  require: 10%

if{STAGE=demo}:
  jobs:
    cron-php:
      planning: scheduled
      schedule: '0/3 * * * *'
      pods:
        cron-php:
          containers:
            php-run: #Container name
              image: ${PHP_IMAGE} #Container image to use
              version: '${PHP_VERSION}-cli'
              volumes: #Volumes to link
                app:
                  mount-path: '/opt/app' #Path where data will be stored
                  add: #folder or file, from .paas.yaml where is located to add to the volume
                    - 'php-job/'
                cron: #Persistent volume, can not be pre-populated
                  name: 'job-volume'
                  mount-path: '/mnt/job'
                  persistent: true
                  write-many: true
              variables: #To define some environment variables
                SERVER_DIRECTORY: '/opt/app/'
                SERVER_SCRIPT: 'src/cron.php'
              resources:
                - type: cpu
                  require: 10%
                - type: memory
                  require: 10%

#Pods (set of container)
pods:
  php-pods: #podset name
    replicas: 2 #instance of pods
    security:
      fs-group: 1001
    containers:
      php-run: #Container name
        image: ${PHP_IMAGE} #Container image to use
        version: '${PHP_VERSION}-cli'
        listen: #Port listen by the container
          - 8080
        volumes: #Volumes to link
          extra:
            from: 'extra'
            mount-path: '/opt/extra' #Path where volume will be mount
          app:
            mount-path: '/opt/app' #Path where data will be stored
            add: #folder or file, from .paas.yaml where is located to add to the volume
              - 'php-app/'
          data: #Persistent volume, can not be pre-populated
            mount-path: '/mnt/data'
            persistent: true
          cron: #Persistent volume, can not be pre-populated
            name: 'job-volume'
            mount-path: '/mnt/job'
            persistent: true
            write-many: true
          map:
            mount-path: '/map'
            from-map: 'map2'
          vault:
            mount-path: '/vault'
            from-secret: 'volume-vault'
        variables: #To define some environment variables
          SERVER_DIRECTORY: '/opt/app/'
          SERVER_SCRIPT: 'src/server.php'
          from-maps:
            KEY0: 'map1.key1'
          import-maps:
            - 'map2'
          from-secrets: #To fetch some value from secret/vault
            KEY1: 'map-vault.key1'
            KEY2: 'map-vault.key2'
          import-secrets:
            - 'map-vault2'
        resources:
          - type: cpu
            require: 10%
          - type: memory
            require: 10%
  python-pods:
    containers:
      python-run:
        image: ${PYTHON_IMAGE}
        version: ${PYTHON_VERSION}
        listen:
          - 8765
        volumes:
          app:
            mount-path: '/opt/app'
            add:
              - 'python-app/'
        variables:
          SERVER_DIRECTORY: '/opt/app/'
          SERVER_SCRIPT: 'server.py'
        resources:
          - type: cpu
            require: 20%
          - type: memory
            require: 20%
  nodejs-pods:
    containers:
      nodejs-run:
        image: ${NODEJS_IMAGE}
        version: ${NODEJS_VERSION}
        listen:
          - 4563
        volumes:
          app:
            mount-path: '/opt/app'
            add:
              - 'nodejs-app/'
        variables:
          SERVER_DIRECTORY: '/opt/app/'
          SERVER_SCRIPT: 'index.js'
        resources:
          - type: cpu
            require: 30%
          - type: memory
            require: 30%
  demo-pods:
    replicas: 1
    containers:
      nginx:
        image: registry.hub.docker.com/library/nginx
        version: alpine
        listen: #Port listen by the container
          - 8080
        volumes:
          www:
            mount-path: '/var'
            add:
              - 'nginx/www'
          config:
            mount-path: '/etc/nginx/conf.d/'
            add:
              - 'nginx/conf.d/default.conf'
        resources:
          - type: cpu
            require: 10%
            limit: 10%
          - type: memory
            require: 10%
            limit: 10%

#Pods expositions
services:
  php-service: #Service name
    pod: "php-pods" #Pod name, use service name by default
    internal: false #If false, a load balancer is used to access it from outside
    protocol: 'TCP' #Or UDP
    ports:
      - listen: 9876 #Port listened
        target: 8080 #Pod's port targeted
  python-service: #Service name
    pod: "python-pods" #Pod name, use service name by default
    ports:
      - listen: 8765 #Port listened
        target: 8765 #Pod's port targeted
  nodejs-service: #Service name
    pod: "nodejs-pods" #Pod name, use service name by default
    ports:
      - listen: 4563 #Port listened
        target: 4563 #Pod's port targeted
  demo-service: #Service name
    pod: "demo-pods" #Pod name, use service name by default
    ports:
      - listen: 8080 #Port listened
        target: 8080 #Pod's port targeted

#Ingresses configuration
ingresses:
  demo: #rule name
    host: ${PROJECT_URL}
    meta:
      letsencrypt: true
    tls:
      secret: "tls-vault" #Configure the orchestrator to fetch value from vault
    service: #default service
      name: demo-service
      port: 8080
    paths:
      - path: /php
        service:
          name: php-service
          port: 9876
      - path: /python
        service:
          name: python-service
          port: 8765
      - path: /nodejs
        service:
          name: nodejs-service
          port: 4563
